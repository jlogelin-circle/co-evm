//! Private ERC20 Bridge with CrossEvmLib (Solidity-based bridge logic)
//!
//! This version uses PrivateERC20.sol with CrossEvmLib.other() calls in Solidity.
//! The deposit() and withdraw() functions handle cross-EVM bridging autonomously.

use alloy_sol_types::{SolCall, sol};
use anyhow::Result;
use co_evm::{
    child_evm::ChildEvm,
    crypto::{UserKeyPair, UserKeys},
    parent_evm::ParentEvm,
    precompiles::CrossEvmCall,
};
use parking_lot::Mutex;
use revm::{
    Context, MainContext,
    context::{BlockEnv, CfgEnv, Journal, LocalContext, TxEnv},
    context_interface::result::{ExecutionResult, Output},
    database::InMemoryDB,
    handler::ExecuteCommitEvm,
    primitives::{Address, Bytes, TxKind, U256},
};
use std::sync::Arc;

sol! {
    #[allow(missing_docs)]
    /// PublicERC20 on parent EVM
    #[sol(bytecode="60c0604052600c60809081526b283ab13634b1902a37b5b2b760a11b60a0525f9061002a9082610163565b50604080518082019091526003815262282aa160e91b60208201526001906100529082610163565b5034801561005e575f5ffd5b50604051610de9380380610de983398101604081905261007d9161021d565b6002819055335f818152600360209081526040808320859055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350610234565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806100f357607f821691505b60208210810361011157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561015e57805f5260205f20601f840160051c8101602085101561013c5750805b601f840160051c820191505b8181101561015b575f8155600101610148565b50505b505050565b81516001600160401b0381111561017c5761017c6100cb565b6101908161018a84546100df565b84610117565b6020601f8211600181146101c2575f83156101ab5750848201515b5f19600385901b1c1916600184901b17845561015b565b5f84815260208120601f198516915b828110156101f157878501518255602094850194600190920191016101d1565b508482101561020e57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f6020828403121561022d575f5ffd5b5051919050565b610ba8806102415f395ff3fe608060405234801561000f575f5ffd5b50600436106100f0575f3560e01c80638dd1480211610093578063b6b55f2511610063578063b6b55f25146101ee578063dd62ed3e14610201578063e78cea921461022b578063f3fef3a314610256575f5ffd5b80638dd14802146101ad57806395d89b41146101c05780639dc29fac146101c8578063a9059cbb146101db575f5ffd5b806323b872dd116100ce57806323b872dd1461014c578063313ce5671461015f57806340c10f191461017957806370a082311461018e575f5ffd5b806306fdde03146100f4578063095ea7b31461011257806318160ddd14610135575b5f5ffd5b6100fc610269565b6040516101099190610998565b60405180910390f35b6101256101203660046109e8565b6102f4565b6040519015158152602001610109565b61013e60025481565b604051908152602001610109565b61012561015a366004610a10565b610360565b610167601281565b60405160ff9091168152602001610109565b61018c6101873660046109e8565b6104e0565b005b61013e61019c366004610a4a565b60036020525f908152604090205481565b61018c6101bb366004610a4a565b6105a7565b6100fc610617565b61018c6101d63660046109e8565b610624565b6101256101e93660046109e8565b61071a565b61018c6101fc366004610a6a565b6107c1565b61013e61020f366004610a81565b600460209081525f928352604080842090915290825290205481565b60055461023e906001600160a01b031681565b6040516001600160a01b039091168152602001610109565b61018c6102643660046109e8565b610886565b5f805461027590610ab2565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610ab2565b80156102ec5780601f106102c3576101008083540402835291602001916102ec565b820191905f5260205f20905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b335f8181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061034e9086815260200190565b60405180910390a35060015b92915050565b6001600160a01b0383165f908152600360205260408120548211156103a05760405162461bcd60e51b815260040161039790610aea565b60405180910390fd5b6001600160a01b0384165f90815260046020908152604080832033845290915290205482111561040b5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610397565b6001600160a01b0384165f9081526003602052604081208054849290610432908490610b2c565b90915550506001600160a01b0383165f908152600360205260408120805484929061045e908490610b3f565b90915550506001600160a01b0384165f90815260046020908152604080832033845290915281208054849290610495908490610b2c565b92505081905550826001600160a01b0316846001600160a01b03165f516020610b535f395f51905f52846040516104ce91815260200190565b60405180910390a35060019392505050565b6005546001600160a01b031633146105315760405162461bcd60e51b815260206004820152601460248201527313db9b1e48189c9a5919d94818d85b881b5a5b9d60621b6044820152606401610397565b6001600160a01b0382165f9081526003602052604081208054839290610558908490610b3f565b925050819055508060025f8282546105709190610b3f565b90915550506040518181526001600160a01b038316905f905f516020610b535f395f51905f52906020015b60405180910390a35050565b6005546001600160a01b0316156105f55760405162461bcd60e51b8152602060048201526012602482015271109c9a5919d948185b1c9958591e481cd95d60721b6044820152606401610397565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461027590610ab2565b6005546001600160a01b031633146106755760405162461bcd60e51b815260206004820152601460248201527327b7363c90313934b233b29031b0b710313ab93760611b6044820152606401610397565b6001600160a01b0382165f908152600360205260409020548111156106ac5760405162461bcd60e51b815260040161039790610aea565b6001600160a01b0382165f90815260036020526040812080548392906106d3908490610b2c565b925050819055508060025f8282546106eb9190610b2c565b90915550506040518181525f906001600160a01b038416905f516020610b535f395f51905f529060200161059b565b335f908152600360205260408120548211156107485760405162461bcd60e51b815260040161039790610aea565b335f9081526003602052604081208054849290610766908490610b2c565b90915550506001600160a01b0383165f9081526003602052604081208054849290610792908490610b3f565b90915550506040518281526001600160a01b0384169033905f516020610b535f395f51905f529060200161034e565b335f908152600360205260409020548111156107ef5760405162461bcd60e51b815260040161039790610aea565b335f908152600360205260408120805483929061080d908490610b2c565b925050819055508060025f8282546108259190610b2c565b90915550506040518181525f9033905f516020610b535f395f51905f529060200160405180910390a360405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a250565b6005546001600160a01b031633146108e05760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79206272696467652063616e20776974686472617700000000000000006044820152606401610397565b6001600160a01b0382165f9081526003602052604081208054839290610907908490610b3f565b925050819055508060025f82825461091f9190610b3f565b90915550506040518181526001600160a01b038316905f905f516020610b535f395f51905f529060200160405180910390a3816001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658260405161098c91815260200190565b60405180910390a25050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146109e3575f5ffd5b919050565b5f5f604083850312156109f9575f5ffd5b610a02836109cd565b946020939093013593505050565b5f5f5f60608486031215610a22575f5ffd5b610a2b846109cd565b9250610a39602085016109cd565b929592945050506040919091013590565b5f60208284031215610a5a575f5ffd5b610a63826109cd565b9392505050565b5f60208284031215610a7a575f5ffd5b5035919050565b5f5f60408385031215610a92575f5ffd5b610a9b836109cd565b9150610aa9602084016109cd565b90509250929050565b600181811c90821680610ac657607f821691505b602082108103610ae457634e487b7160e01b5f52602260045260245ffd5b50919050565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561035a5761035a610b18565b8082018082111561035a5761035a610b1856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220803c73df28386d1969de2465c06647731042e015bb903c3638954b649da91eae64736f6c634300081e0033")]
    contract PublicERC20 {
        constructor(uint256 initialSupply);
        function balanceOf(address account) external view returns (uint256);
        function transfer(address to, uint256 amount) external returns (bool);
        function setBridge(address bridge) external;
        function mint(address to, uint256 amount) external;
        function burn(address from, uint256 amount) external;
    }

    #[allow(missing_docs)]
    /// PrivateERC20 with CrossEvmLib integration
    #[sol(bytecode="60806040526040518060400160405280600d81526020017f5072697661746520546f6b656e000000000000000000000000000000000000008152505f9081610047919061033d565b506040518060400160405280600481526020017f50524956000000000000000000000000000000000000000000000000000000008152506001908161008c919061033d565b50348015610098575f5ffd5b5060405161215c38038061215c83398181016040528101906100ba919061046a565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610495565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061017b57607f821691505b60208210810361018e5761018d610137565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826101b5565b6101fa86836101b5565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61023e61023961023484610212565b61021b565b610212565b9050919050565b5f819050919050565b61025783610224565b61026b61026382610245565b8484546101c1565b825550505050565b5f5f905090565b610282610273565b61028d81848461024e565b505050565b5b818110156102b0576102a55f8261027a565b600181019050610293565b5050565b601f8211156102f5576102c681610194565b6102cf846101a6565b810160208510156102de578190505b6102f26102ea856101a6565b830182610292565b50505b505050565b5f82821c905092915050565b5f6103155f19846008026102fa565b1980831691505092915050565b5f61032d8383610306565b9150826002028217905092915050565b61034682610100565b67ffffffffffffffff81111561035f5761035e61010a565b5b6103698254610164565b6103748282856102b4565b5f60209050601f8311600181146103a5575f8415610393578287015190505b61039d8582610322565b865550610404565b601f1984166103b386610194565b5f5b828110156103da578489015182556001820191506020850194506020810190506103b5565b868310156103f757848901516103f3601f891682610306565b8355505b6001600288020188555050505b505050505050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61043982610410565b9050919050565b6104498161042f565b8114610453575f5ffd5b50565b5f8151905061046481610440565b92915050565b5f6020828403121561047f5761047e61040c565b5b5f61048c84828501610456565b91505092915050565b611cba806104a25f395ff3fe608060405234801561000f575f5ffd5b50600436106100cd575f3560e01c8063313ce5671161008a57806395d89b411161006457806395d89b4114610227578063a9059cbb14610245578063b6b55f2514610275578063dd62ed3e146102a5576100cd565b8063313ce567146101bb5780634ee3dc91146101d957806370a08231146101f7576100cd565b806306fdde03146100d1578063095ea7b3146100ef57806312065fe01461011f57806318160ddd1461013d57806323b872dd1461015b5780632e1a7d4d1461018b575b5f5ffd5b6100d96102d5565b6040516100e69190611169565b60405180910390f35b6101096004803603810190610104919061121a565b610360565b6040516101169190611272565b60405180910390f35b61012761044d565b604051610134919061129a565b60405180910390f35b610145610491565b604051610152919061129a565b60405180910390f35b610175600480360381019061017091906112b3565b610497565b6040516101829190611272565b60405180910390f35b6101a560048036038101906101a09190611303565b610777565b6040516101b29190611272565b60405180910390f35b6101c3610a85565b6040516101d09190611349565b60405180910390f35b6101e1610a8a565b6040516101ee9190611371565b60405180910390f35b610211600480360381019061020c919061138a565b610aaf565b60405161021e919061129a565b60405180910390f35b61022f610ac4565b60405161023c9190611169565b60405180910390f35b61025f600480360381019061025a919061121a565b610b50565b60405161026c9190611272565b60405180910390f35b61028f600480360381019061028a9190611303565b610ce6565b60405161029c9190611272565b60405180910390f35b6102bf60048036038101906102ba91906113b5565b610f74565b6040516102cc919061129a565b60405180910390f35b5f80546102e190611420565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90611420565b80156103585780601f1061032f57610100808354040283529160200191610358565b820191905f5260205f20905b81548152906001019060200180831161033b57829003601f168201915b505050505081565b5f8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043b919061129a565b60405180910390a36001905092915050565b5f60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b60025481565b5f8160035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f9061149a565b60405180910390fd5b8160045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205410156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90611502565b60405180910390fd5b8160035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461061f919061154d565b925050819055508160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106729190611580565b925050819055508160045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610700919061154d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610764919061129a565b60405180910390a3600190509392505050565b5f8160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205410156107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef9061149a565b60405180910390fd5b8160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610844919061154d565b925050819055508160025f82825461085c919061154d565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108c0919061129a565b60405180910390a35f33836040516024016108dc9291906115b3565b6040516020818303038152906040527f40c10f19000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f61098660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f94565b73ffffffffffffffffffffffffffffffffffffffff16826040516109aa919061161e565b5f604051808303815f865af19150503d805f81146109e3576040519150601f19603f3d011682016040523d82523d5f602084013e6109e8565b606091505b5050905080610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a239061167e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6585604051610a72919061129a565b60405180910390a2600192505050919050565b601281565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052805f5260405f205f915090505481565b60018054610ad190611420565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd90611420565b8015610b485780601f10610b1f57610100808354040283529160200191610b48565b820191905f5260205f20905b815481529060010190602001808311610b2b57829003601f168201915b505050505081565b5f8160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc89061149a565b60405180910390fd5b8160035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610c1d919061154d565b925050819055508160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610c709190611580565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cd4919061129a565b60405180910390a36001905092915050565b5f5f3383604051602401610cfb9291906115b3565b6040516020818303038152906040527f9dc29fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f610da560055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f94565b73ffffffffffffffffffffffffffffffffffffffff1682604051610dc9919061161e565b5f604051808303815f865af19150503d805f8114610e02576040519150601f19603f3d011682016040523d82523d5f602084013e610e07565b606091505b5050905080610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e42906116e6565b60405180910390fd5b8360035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610e979190611580565b925050819055508360025f828254610eaf9190611580565b925050819055503373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610f13919061129a565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c85604051610f61919061129a565b60405180910390a2600192505050919050565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b5f5f8273ffffffffffffffffffffffffffffffffffffffff165f1b90505f60405180602001610fc2906110ec565b6020820181038252601f19601f8201166040525090505f8185604051602001610feb9190611371565b60405160208183030381529060405260405160200161100b929190611704565b60405160208183030381529060405290505f60ff60f81b3085848051906020012060405160200161103f94939291906117e0565b604051602081830303815290604052805190602001209050805f1c94505f853b90505f81036110e257848351602085015ff595505f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d890611877565b60405180910390fd5b5b5050505050919050565b6103ef8061189683390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61113b826110f9565b6111458185611103565b9350611155818560208601611113565b61115e81611121565b840191505092915050565b5f6020820190508181035f8301526111818184611131565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6111b68261118d565b9050919050565b6111c6816111ac565b81146111d0575f5ffd5b50565b5f813590506111e1816111bd565b92915050565b5f819050919050565b6111f9816111e7565b8114611203575f5ffd5b50565b5f81359050611214816111f0565b92915050565b5f5f604083850312156112305761122f611189565b5b5f61123d858286016111d3565b925050602061124e85828601611206565b9150509250929050565b5f8115159050919050565b61126c81611258565b82525050565b5f6020820190506112855f830184611263565b92915050565b611294816111e7565b82525050565b5f6020820190506112ad5f83018461128b565b92915050565b5f5f5f606084860312156112ca576112c9611189565b5b5f6112d7868287016111d3565b93505060206112e8868287016111d3565b92505060406112f986828701611206565b9150509250925092565b5f6020828403121561131857611317611189565b5b5f61132584828501611206565b91505092915050565b5f60ff82169050919050565b6113438161132e565b82525050565b5f60208201905061135c5f83018461133a565b92915050565b61136b816111ac565b82525050565b5f6020820190506113845f830184611362565b92915050565b5f6020828403121561139f5761139e611189565b5b5f6113ac848285016111d3565b91505092915050565b5f5f604083850312156113cb576113ca611189565b5b5f6113d8858286016111d3565b92505060206113e9858286016111d3565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061143757607f821691505b60208210810361144a576114496113f3565b5b50919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f611484601483611103565b915061148f82611450565b602082019050919050565b5f6020820190508181035f8301526114b181611478565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e6365000000000000000000005f82015250565b5f6114ec601683611103565b91506114f7826114b8565b602082019050919050565b5f6020820190508181035f830152611519816114e0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611557826111e7565b9150611562836111e7565b925082820390508181111561157a57611579611520565b5b92915050565b5f61158a826111e7565b9150611595836111e7565b92508282019050808211156115ad576115ac611520565b5b92915050565b5f6040820190506115c65f830185611362565b6115d3602083018461128b565b9392505050565b5f81519050919050565b5f81905092915050565b5f6115f8826115da565b61160281856115e4565b9350611612818560208601611113565b80840191505092915050565b5f61162982846115ee565b915081905092915050565b7f4d696e74206f6e20706172656e74206661696c656400000000000000000000005f82015250565b5f611668601583611103565b915061167382611634565b602082019050919050565b5f6020820190508181035f8301526116958161165c565b9050919050565b7f4275726e206f6e20706172656e74206661696c656400000000000000000000005f82015250565b5f6116d0601583611103565b91506116db8261169c565b602082019050919050565b5f6020820190508181035f8301526116fd816116c4565b9050919050565b5f61170f82856115ee565b915061171b82846115ee565b91508190509392505050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b61176c61176782611727565b611752565b82525050565b5f8160601b9050919050565b5f61178882611772565b9050919050565b5f6117998261177e565b9050919050565b6117b16117ac826111ac565b61178f565b82525050565b5f819050919050565b5f819050919050565b6117da6117d5826117b7565b6117c0565b82525050565b5f6117eb828761175b565b6001820191506117fb82866117a0565b60148201915061180b82856117c9565b60208201915061181b82846117c9565b60208201915081905095945050505050565b7f50726f7879206465706c6f796d656e74206661696c65640000000000000000005f82015250565b5f611861601783611103565b915061186c8261182d565b602082019050919050565b5f6020820190508181035f83015261188e81611855565b905091905056fe60a060405234801561000f575f5ffd5b506040516103ef3803806103ef833981810160405281019061003191906100c9565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100f4565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100988261006f565b9050919050565b6100a88161008e565b81146100b2575f5ffd5b50565b5f815190506100c38161009f565b92915050565b5f602082840312156100de576100dd61006b565b5b5f6100eb848285016100b5565b91505092915050565b6080516102e461010b5f395f600701526102e45ff3fe60806040525f7f00000000000000000000000000000000000000000000000000000000000000005f3660405160200161003a939291906101af565b60405160208183030381529060405290505f5f60c073ffffffffffffffffffffffffffffffffffffffff16836040516100739190610220565b5f604051808303815f865af19150503d805f81146100ac576040519150601f19603f3d011682016040523d82523d5f602084013e6100b1565b606091505b5091509150816100f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ed90610290565b60405180910390fd5b805160208201f35b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610127826100fe565b9050919050565b5f8160601b9050919050565b5f6101448261012e565b9050919050565b5f6101558261013a565b9050919050565b61016d6101688261011d565b61014b565b82525050565b5f81905092915050565b828183375f83830152505050565b5f6101968385610173565b93506101a383858461017d565b82840190509392505050565b5f6101ba828661015c565b6014820191506101cb82848661018b565b9150819050949350505050565b5f81519050919050565b8281835e5f83830152505050565b5f6101fa826101d8565b6102048185610173565b93506102148185602086016101e2565b80840191505092915050565b5f61022b82846101f0565b915081905092915050565b5f82825260208201905092915050565b7f43726f73732d45564d2063616c6c206661696c656400000000000000000000005f82015250565b5f61027a601583610236565b915061028582610246565b602082019050919050565b5f6020820190508181035f8301526102a78161026e565b905091905056fea264697066735822122028c53a3627833a95b20c797037185b89cb15f68ff7b0c54b4ea581c40bcd2e7264736f6c634300081e0033a2646970667358221220d72d0cef5b2a503e117efd79f6f98c88e65d5808eb063c2e6c75a9b5fc7f746664736f6c634300081e0033")]
    contract PrivateERC20 {
        constructor(address publicToken);
        function balanceOf(address account) external view returns (uint256);
        function transfer(address to, uint256 amount) external returns (bool);
        function deposit(uint256 amount) external returns (bool);
        function withdraw(uint256 amount) external returns (bool);
        function getBalance() external view returns (uint256);
    }
}

type EvmContext =
    Context<BlockEnv, TxEnv, CfgEnv, InMemoryDB, Journal<InMemoryDB>, (), LocalContext>;

/// Message types for cross-EVM communication
#[derive(Debug, Clone)]
enum CrossEvmMessage {
    CallParent {
        caller: Address,
        target: Address,
        input: Bytes,
    },
    CallChild {
        caller: Address,
        target: Address,
        input: Bytes,
    },
    CallChildEncrypted {
        caller: Address,
        target: Address,
        encrypted_input: Bytes,
    },
}

#[derive(Debug, Clone)]
#[allow(dead_code)]
struct CrossEvmResponse {
    success: bool,
    data: Bytes,
}

/// Bridge coordinator - Uses message passing to avoid reentrancy
struct BridgeCoordinator {
    parent: Arc<Mutex<Option<ParentEvm<EvmContext, ()>>>>,
    child: Arc<Mutex<Option<ChildEvm<EvmContext, ()>>>>,
    parent_nonce: Arc<Mutex<u64>>,
    child_nonce: Arc<Mutex<u64>>,
    /// Message queue for cross-EVM calls (avoids reentrancy)
    message_queue: Arc<Mutex<Vec<CrossEvmMessage>>>,
    /// Response storage for queued calls
    response_storage: Arc<Mutex<Vec<CrossEvmResponse>>>,
    /// Current transaction caller (for demo purposes)
    current_caller: Arc<Mutex<Address>>,
}

impl Clone for BridgeCoordinator {
    fn clone(&self) -> Self {
        Self {
            parent: self.parent.clone(),
            child: self.child.clone(),
            parent_nonce: self.parent_nonce.clone(),
            child_nonce: self.child_nonce.clone(),
            message_queue: self.message_queue.clone(),
            response_storage: self.response_storage.clone(),
            current_caller: self.current_caller.clone(),
        }
    }
}

impl std::fmt::Debug for BridgeCoordinator {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("BridgeCoordinator")
            .field("parent", &"Arc<Mutex<Option<ParentEvm>>>")
            .field("child", &"Arc<Mutex<Option<ChildEvm>>>")
            .field("parent_nonce", &self.parent_nonce.lock())
            .field("child_nonce", &self.child_nonce.lock())
            .field("pending_messages", &self.message_queue.lock().len())
            .finish()
    }
}

impl BridgeCoordinator {
    fn new() -> Arc<Self> {
        Arc::new(Self {
            parent: Arc::new(Mutex::new(None)),
            child: Arc::new(Mutex::new(None)),
            parent_nonce: Arc::new(Mutex::new(0)),
            child_nonce: Arc::new(Mutex::new(0)),
            message_queue: Arc::new(Mutex::new(Vec::new())),
            response_storage: Arc::new(Mutex::new(Vec::new())),
            current_caller: Arc::new(Mutex::new(Address::ZERO)),
        })
    }

    fn set_current_caller(&self, caller: Address) {
        *self.current_caller.lock() = caller;
    }

    fn get_current_caller(&self) -> Address {
        *self.current_caller.lock()
    }

    fn set_parent(&self, parent: ParentEvm<EvmContext, ()>) {
        *self.parent.lock() = Some(parent);
    }

    fn set_child(&self, child: ChildEvm<EvmContext, ()>) {
        *self.child.lock() = Some(child);
    }

    fn get_parent_nonce(&self) -> u64 {
        *self.parent_nonce.lock()
    }

    fn get_child_nonce(&self) -> u64 {
        *self.child_nonce.lock()
    }

    fn increment_parent_nonce(&self) {
        *self.parent_nonce.lock() += 1;
    }

    fn increment_child_nonce(&self) {
        *self.child_nonce.lock() += 1;
    }

    fn get_enclave_public_key(&self) -> Vec<u8> {
        let child_guard = self.child.lock();
        let child = child_guard.as_ref().expect("Child not initialized");
        child.public_key()
    }
}

impl CrossEvmCall for BridgeCoordinator {
    fn call_child(&self, target: Address, input: &Bytes) -> Result<Bytes, &'static str> {
        eprintln!("📬 Queuing call_child message for later processing");
        let caller = self.get_current_caller();
        // Queue the message instead of executing immediately
        self.message_queue.lock().push(CrossEvmMessage::CallChild {
            caller,
            target,
            input: input.clone(),
        });

        // Return a placeholder - actual response will be processed later
        // In a real system, this would return a future/promise
        Ok(Bytes::new())
    }

    fn call_parent(&self, target: Address, input: &Bytes) -> Result<Bytes, &'static str> {
        eprintln!("📬 Queuing call_parent message for later processing");
        let caller = self.get_current_caller();
        // Queue the message instead of executing immediately
        self.message_queue.lock().push(CrossEvmMessage::CallParent {
            caller,
            target,
            input: input.clone(),
        });

        // Return a placeholder - actual response will be processed later
        Ok(Bytes::new())
    }

    fn call_child_encrypted(
        &self,
        target: Address,
        encrypted_input: &Bytes,
    ) -> Result<Bytes, &'static str> {
        eprintln!("📬 Queuing call_child_encrypted message for later processing");
        let caller = self.get_current_caller();
        // Queue the message instead of executing immediately
        self.message_queue
            .lock()
            .push(CrossEvmMessage::CallChildEncrypted {
                caller,
                target,
                encrypted_input: encrypted_input.clone(),
            });

        // Return a placeholder - actual response will be processed later
        Ok(Bytes::new())
    }
}

impl BridgeCoordinator {
    /// Process all queued cross-EVM messages (message passing architecture)
    fn process_queued_messages(&self) -> Result<()> {
        let max_iterations = 10; // Prevent infinite loops
        let mut iteration = 0;

        while iteration < max_iterations {
            // Take all pending messages
            let messages: Vec<CrossEvmMessage> = {
                let mut queue = self.message_queue.lock();
                if queue.is_empty() {
                    break; // No more messages
                }
                std::mem::take(&mut *queue)
            };

            if messages.is_empty() {
                break;
            }

            eprintln!(
                "🔄 Processing {} queued cross-EVM messages (iteration {})",
                messages.len(),
                iteration + 1
            );

            // Process each message
            for msg in messages {
                match msg {
                    CrossEvmMessage::CallParent {
                        caller,
                        target,
                        input,
                    } => {
                        eprintln!("  📤 Executing call_parent (burn tokens on parent)");
                        // Use bridge address (encrypted router 0xC0) as the caller
                        // Precompile addresses have nonce 0
                        let bridge_addr = Address::from_slice(
                            &hex::decode("00000000000000000000000000000000000000C0").unwrap(),
                        );
                        let bridge_nonce = 0; // Precompiles always use nonce 0
                        let mut parent_guard = self.parent.lock();
                        if let Some(parent) = parent_guard.as_mut() {
                            match parent.call_contract_from(
                                bridge_addr,
                                target,
                                input,
                                bridge_nonce,
                            ) {
                                Ok(ExecutionResult::Success { output, .. }) => {
                                    eprintln!(
                                        "     ✓ Tokens burned on parent from user {:?}",
                                        caller
                                    );
                                    let data = match output {
                                        Output::Call(d) => d,
                                        Output::Create(d, _) => d,
                                    };
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: true,
                                        data,
                                    });
                                    // Don't increment parent nonce since we're using bridge's nonce (0)
                                }
                                Ok(other) => {
                                    eprintln!("⚠️  call_parent not successful: {:?}", other);
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: false,
                                        data: Bytes::new(),
                                    });
                                }
                                Err(e) => {
                                    eprintln!("❌ call_parent error: {:?}", e);
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: false,
                                        data: Bytes::new(),
                                    });
                                }
                            }
                        }
                    }
                    CrossEvmMessage::CallChild {
                        caller: _caller,
                        target,
                        input,
                    } => {
                        eprintln!("  📤 Executing queued call_child");
                        let nonce = self.get_child_nonce();
                        let mut child_guard = self.child.lock();
                        if let Some(child) = child_guard.as_mut() {
                            // TODO: Use caller when calling child contract
                            match child.call_contract(target, input, nonce) {
                                Ok(ExecutionResult::Success { output, .. }) => {
                                    let data = match output {
                                        Output::Call(d) => d,
                                        Output::Create(d, _) => d,
                                    };
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: true,
                                        data,
                                    });
                                    self.increment_child_nonce();
                                }
                                _ => {
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: false,
                                        data: Bytes::new(),
                                    });
                                }
                            }
                        }
                    }
                    CrossEvmMessage::CallChildEncrypted {
                        caller,
                        target,
                        encrypted_input,
                    } => {
                        eprintln!(
                            "  📤 Executing call_child_encrypted (deposit on child with user {:?})",
                            caller
                        );
                        // Use the caller's nonce (0 for first transaction)
                        let caller_nonce = 0;
                        let mut child_guard = self.child.lock();
                        if let Some(child) = child_guard.as_mut() {
                            match child.call_contract_encrypted_from(
                                caller,
                                target,
                                encrypted_input,
                                caller_nonce,
                            ) {
                                Ok(encrypted_response) => {
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: true,
                                        data: encrypted_response,
                                    });
                                    // Don't increment child_nonce since we used the caller's nonce
                                }
                                Err(e) => {
                                    eprintln!("  ❌ Child encrypted execution error: {}", e);
                                    self.response_storage.lock().push(CrossEvmResponse {
                                        success: false,
                                        data: Bytes::new(),
                                    });
                                }
                            }
                        }
                    }
                }
            }

            iteration += 1;
        }

        if iteration >= max_iterations {
            eprintln!("⚠️  Reached max iterations - possible infinite cross-EVM call loop");
        }

        Ok(())
    }

    /// Clear message queue and response storage (for starting a new transaction)
    fn clear_queues(&self) {
        self.message_queue.lock().clear();
        self.response_storage.lock().clear();
    }
}

/// Wrapper to make Arc<BridgeCoordinator> work with Rc<RefCell<dyn CrossEvmCall>> API
#[derive(Debug, Clone)]
struct CoordinatorWrapper(Arc<BridgeCoordinator>);

impl CrossEvmCall for CoordinatorWrapper {
    fn call_child(&self, target: Address, input: &Bytes) -> Result<Bytes, &'static str> {
        self.0.call_child(target, input)
    }

    fn call_parent(&self, target: Address, input: &Bytes) -> Result<Bytes, &'static str> {
        self.0.call_parent(target, input)
    }

    fn call_child_encrypted(
        &self,
        target: Address,
        encrypted_input: &Bytes,
    ) -> Result<Bytes, &'static str> {
        self.0.call_child_encrypted(target, encrypted_input)
    }
}

fn init_parent(coordinator: Arc<BridgeCoordinator>) -> Result<()> {
    use std::{cell::RefCell, rc::Rc};
    let ctx = Context::mainnet().with_db(InMemoryDB::default());
    // Create an Rc<RefCell<>> wrapper for the EVM API which expects this type
    let wrapper = CoordinatorWrapper(coordinator.clone());
    let coordinator_rc: Rc<RefCell<dyn CrossEvmCall>> = Rc::new(RefCell::new(wrapper));
    let parent_evm = ParentEvm::new(ctx, (), coordinator_rc);
    coordinator.set_parent(parent_evm);
    Ok(())
}

fn init_child(coordinator: Arc<BridgeCoordinator>) -> Result<()> {
    use std::{cell::RefCell, rc::Rc};
    let ctx = Context::mainnet().with_db(InMemoryDB::default());
    // Create an Rc<RefCell<>> wrapper for the EVM API which expects this type
    let wrapper = CoordinatorWrapper(coordinator.clone());
    let coordinator_rc: Rc<RefCell<dyn CrossEvmCall>> = Rc::new(RefCell::new(wrapper));
    let child_evm = ChildEvm::new(ctx, (), coordinator_rc);
    coordinator.set_child(child_evm);
    Ok(())
}

fn deploy_public_token(
    coordinator: &Arc<BridgeCoordinator>,
    initial_supply: U256,
) -> Result<Address> {
    let constructor_args = initial_supply;
    let mut bytecode = PublicERC20::BYTECODE.to_vec();
    bytecode.extend_from_slice(&alloy_sol_types::SolValue::abi_encode(&constructor_args));

    let nonce = coordinator.get_parent_nonce();
    let mut parent_guard = coordinator.parent.lock();
    let parent = parent_guard.as_mut().expect("Parent not initialized");

    let tx = TxEnv::builder()
        .kind(TxKind::Create)
        .data(Bytes::from(bytecode))
        .gas_limit(10_000_000)
        .nonce(nonce)
        .build()
        .unwrap();

    let result = ExecuteCommitEvm::transact_commit(&mut parent.evm, tx)?;

    drop(parent_guard);
    coordinator.increment_parent_nonce();

    match result {
        ExecutionResult::Success {
            output: Output::Create(_, Some(address)),
            ..
        } => {
            println!("✅ PublicERC20 deployed at: {}", address);
            Ok(address)
        }
        _ => anyhow::bail!("Failed to deploy PublicERC20"),
    }
}

fn deploy_private_token(
    coordinator: &Arc<BridgeCoordinator>,
    public_token: Address,
) -> Result<Address> {
    let constructor_args = public_token;
    let mut bytecode = PrivateERC20::BYTECODE.to_vec();
    bytecode.extend_from_slice(&alloy_sol_types::SolValue::abi_encode(&constructor_args));

    let nonce = coordinator.get_child_nonce();
    let mut child_guard = coordinator.child.lock();
    let child = child_guard.as_mut().expect("Child not initialized");

    let tx = TxEnv::builder()
        .kind(TxKind::Create)
        .data(Bytes::from(bytecode))
        .gas_limit(10_000_000)
        .nonce(nonce)
        .build()
        .unwrap();

    let result = ExecuteCommitEvm::transact_commit(&mut child.evm, tx)?;

    drop(child_guard);
    coordinator.increment_child_nonce();

    match result {
        ExecutionResult::Success {
            output: Output::Create(_, Some(address)),
            ..
        } => {
            println!("✅ PrivateERC20 deployed at: {}", address);
            Ok(address)
        }
        _ => anyhow::bail!("Failed to deploy PrivateERC20"),
    }
}

fn set_bridge(
    coordinator: &Arc<BridgeCoordinator>,
    public_token: Address,
    bridge_addr: Address,
) -> Result<()> {
    let call = PublicERC20::setBridgeCall {
        bridge: bridge_addr,
    };

    let nonce = coordinator.get_parent_nonce();
    let mut parent_guard = coordinator.parent.lock();
    let parent = parent_guard.as_mut().expect("Parent not initialized");

    let tx = TxEnv::builder()
        .kind(TxKind::Call(public_token))
        .data(Bytes::from(call.abi_encode()))
        .gas_limit(10_000_000)
        .nonce(nonce)
        .build()
        .unwrap();

    ExecuteCommitEvm::transact_commit(&mut parent.evm, tx)?;

    drop(parent_guard);
    coordinator.increment_parent_nonce();

    println!("✅ Bridge address set on PublicERC20");
    Ok(())
}

fn read_public_balance(
    coordinator: &Arc<BridgeCoordinator>,
    token: Address,
    account: Address,
) -> Result<U256> {
    let call = PublicERC20::balanceOfCall { account };

    let nonce = coordinator.get_parent_nonce();
    let mut parent_guard = coordinator.parent.lock();
    let parent = parent_guard.as_mut().expect("Parent not initialized");

    let result = parent.call_contract(token, Bytes::from(call.abi_encode()), nonce)?;

    drop(parent_guard);
    // Must increment nonce even for view calls since call_contract commits the transaction
    coordinator.increment_parent_nonce();

    match result {
        ExecutionResult::Success { output, .. } => {
            let output_bytes = match output {
                Output::Call(data) => data,
                Output::Create(data, _) => data,
            };

            if output_bytes.len() >= 32 {
                Ok(U256::from_be_slice(&output_bytes[..32]))
            } else {
                anyhow::bail!("Invalid output length")
            }
        }
        _ => anyhow::bail!("Call failed"),
    }
}

fn read_private_balance(
    coordinator: &Arc<BridgeCoordinator>,
    token: Address,
    account: Address,
) -> Result<U256> {
    let call = PrivateERC20::balanceOfCall { account };

    let nonce = coordinator.get_child_nonce();
    let mut child_guard = coordinator.child.lock();
    let child = child_guard.as_mut().expect("Child not initialized");

    let result = child.call_contract(token, Bytes::from(call.abi_encode()), nonce)?;

    drop(child_guard);
    // Must increment nonce even for view calls since call_contract commits the transaction
    coordinator.increment_child_nonce();

    match result {
        ExecutionResult::Success { output, .. } => {
            let output_bytes = match output {
                Output::Call(data) => data,
                Output::Create(data, _) => data,
            };

            if output_bytes.len() >= 32 {
                Ok(U256::from_be_slice(&output_bytes[..32]))
            } else {
                anyhow::bail!("Invalid output length")
            }
        }
        _ => anyhow::bail!("Call failed"),
    }
}

/// Call PrivateERC20.deposit() - contract will use CrossEvmLib to burn public tokens
fn deposit_via_crossevmlib(
    coordinator: &Arc<BridgeCoordinator>,
    private_token: Address,
    user_addr: Address,
    amount: U256,
    user_keys: &UserKeys,
) -> Result<()> {
    let enclave_pubkey_bytes = coordinator.get_enclave_public_key();

    // Prepare PrivateERC20.deposit(amount) - this will call CrossEvmLib.other()
    let deposit_call = PrivateERC20::depositCall { amount };
    let call_data = deposit_call.abi_encode();

    // Encrypt the call
    let encrypted_call = user_keys.encrypt_for_enclave(&call_data, &enclave_pubkey_bytes)?;

    // Prepare input for encrypted router
    let mut router_input = Vec::with_capacity(20 + encrypted_call.len());
    router_input.extend_from_slice(private_token.as_slice());
    router_input.extend_from_slice(&encrypted_call);

    // Clear any previous messages
    coordinator.clear_queues();

    // Set the current caller so cross-EVM calls know who initiated the transaction
    coordinator.set_current_caller(user_addr);

    // Build transaction with user as caller
    // User hasn't sent any transactions yet, so nonce is 0
    let user_nonce = 0;
    let tx = TxEnv::builder()
        .caller(user_addr)
        .kind(TxKind::Call(Address::from_slice(
            &hex::decode("00000000000000000000000000000000000000C1").unwrap(),
        )))
        .data(Bytes::from(router_input))
        .gas_limit(10_000_000)
        .nonce(user_nonce)
        .build()
        .unwrap();

    // Execute the initial transaction - cross-EVM calls will be queued
    println!("🔄 Phase 1: Execute initial transaction on parent (queues messages)");
    let result = {
        let mut parent_guard = coordinator.parent.lock();
        let parent = parent_guard.as_mut().expect("Parent not initialized");
        ExecuteCommitEvm::transact_commit(&mut parent.evm, tx)?
    };
    // Don't increment parent_nonce since we used user's nonce

    // Now process all queued cross-EVM messages
    // This models separate EVM services communicating via message passing
    println!("🔄 Phase 2: Processing queued cross-EVM messages...\n");
    coordinator.process_queued_messages()?;

    match result {
        ExecutionResult::Success { .. } => {
            println!("\n✅ Deposit successful - cross-EVM calls completed!");
            Ok(())
        }
        _ => anyhow::bail!("Deposit failed"),
    }
}

fn main() -> Result<()> {
    println!("\n💰 Private ERC20 with CrossEvmLib (Message Passing Architecture) 💰\n");
    println!("═══════════════════════════════════════════════════════════════");
    println!("✅  This example demonstrates cross-EVM communication using");
    println!("✅  message passing to avoid reentrancy issues");
    println!("✅  Cross-EVM calls are queued and processed asynchronously");
    println!("═══════════════════════════════════════════════════════════════\n");

    let coordinator = BridgeCoordinator::new();
    init_parent(coordinator.clone())?;
    init_child(coordinator.clone())?;

    let user_addr =
        Address::from_slice(&hex::decode("1111111111111111111111111111111111111111").unwrap());
    let user_keys = UserKeys::generate();

    println!("📦 Deploying contracts...\n");
    let initial_supply = U256::from(1_000_000);
    let public_token = deploy_public_token(&coordinator, initial_supply)?;
    let private_token = deploy_private_token(&coordinator, public_token)?;

    let bridge_addr =
        Address::from_slice(&hex::decode("00000000000000000000000000000000000000C0").unwrap());
    set_bridge(&coordinator, public_token, bridge_addr)?;
    println!();

    // Transfer tokens to user
    let nonce = coordinator.get_parent_nonce();
    let mut parent_guard = coordinator.parent.lock();
    let parent = parent_guard.as_mut().expect("Parent not initialized");

    let transfer_call = PublicERC20::transferCall {
        to: user_addr,
        amount: U256::from(10_000),
    };

    let tx = TxEnv::builder()
        .kind(TxKind::Call(public_token))
        .data(Bytes::from(transfer_call.abi_encode()))
        .gas_limit(10_000_000)
        .nonce(nonce)
        .build()
        .unwrap();

    ExecuteCommitEvm::transact_commit(&mut parent.evm, tx)?;
    drop(parent_guard);
    coordinator.increment_parent_nonce();

    let initial_public = read_public_balance(&coordinator, public_token, user_addr)?;
    let initial_private = read_private_balance(&coordinator, private_token, user_addr)?;
    println!("📊 Initial setup complete");
    println!("   Public tokens (parent):  {}", initial_public);
    println!("   Private tokens (child):  {}\n", initial_private);

    println!("═══════════════════════════════════════════════════════════════");
    println!("🔐 Demonstrating cross-EVM token bridge with message passing");
    println!("═══════════════════════════════════════════════════════════════");
    println!("⚠️  Calling PrivateERC20.deposit() which uses CrossEvmLib...");
    println!("✨  Message passing architecture allows parent->child->parent!");
    println!("⚠️  Cross-EVM calls are queued and processed asynchronously\n");

    // This now works with message passing architecture!
    deposit_via_crossevmlib(
        &coordinator,
        private_token,
        user_addr,
        U256::from(100),
        &user_keys,
    )?;

    let final_public = read_public_balance(&coordinator, public_token, user_addr)?;
    let final_private = read_private_balance(&coordinator, private_token, user_addr)?;
    println!("📊 Final balances:");
    println!(
        "   Public tokens (parent):  {} (burned: {})",
        final_public,
        initial_public - final_public
    );
    println!(
        "   Private tokens (child):  {} (minted: {})\n",
        final_private,
        final_private - initial_private
    );

    println!("═══════════════════════════════════════════════════════════════");
    println!("✅ SUCCESS: Cross-EVM message passing demonstrated!");
    println!("═══════════════════════════════════════════════════════════════");
    println!("✨ Messages queued and processed asynchronously");
    println!("📨 This models how separate EVM services communicate");
    println!("🌉 Tokens successfully bridged between parent and child EVMs\n");

    Ok(())
}
